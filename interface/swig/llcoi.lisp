;;; Generated by Verrazano 0.5
;;; WARNING: This is a generated file, editing it is unwise!


(cl:in-package :cl-user)

(cl:defpackage :llcoi
  (:use :cffi)
  (:nicknames)
  (:export "RENDER-WINDOW-HANDLE-NEW"
           "RENDER-WINDOW-HANDLE-CONSTRUCTOR"
           "RENDER-WINDOW-HANDLE-OPERATOR-="
           "LIGHT-HANDLE-NEW"
           "LIGHT-HANDLE-CONSTRUCTOR"
           "LIGHT-HANDLE-OPERATOR-="
           "SCENE-NODE-HANDLE-NEW"
           "SCENE-NODE-HANDLE-CONSTRUCTOR"
           "SCENE-NODE-HANDLE-OPERATOR-="
           "CAMERA-HANDLE-NEW"
           "CAMERA-HANDLE-CONSTRUCTOR"
           "CAMERA-HANDLE-OPERATOR-="
           "ENTITY-HANDLE-NEW"
           "ENTITY-HANDLE-CONSTRUCTOR"
           "ENTITY-HANDLE-OPERATOR-="
           ".-0-NEW"
           ".-0-CONSTRUCTOR"
           "COI-QUATERNION-OPERATOR-="
           "VIEWPORT-HANDLE-NEW"
           "VIEWPORT-HANDLE-CONSTRUCTOR"
           "VIEWPORT-HANDLE-OPERATOR-="
           "SCENE-MANAGER-HANDLE-NEW"
           "SCENE-MANAGER-HANDLE-CONSTRUCTOR"
           "SCENE-MANAGER-HANDLE-OPERATOR-="
           "ROOT-HANDLE-NEW"
           "ROOT-HANDLE-CONSTRUCTOR"
           "ROOT-HANDLE-OPERATOR-="
           ".-2-NEW"
           ".-2-CONSTRUCTOR"
           "ENGINE-OPTIONS-OPERATOR-="
           ".-1-NEW"
           ".-1-CONSTRUCTOR"
           "COI-VECTOR-3-OPERATOR-="
           "RENDER-SYSTEM-HANDLE-NEW"
           "RENDER-SYSTEM-HANDLE-CONSTRUCTOR"
           "RENDER-SYSTEM-HANDLE-OPERATOR-="
           "INITIALISE-ALL-RESOURCEGROUPS"
           "SET-RENDER-SYSTEM"
           "GET-SCENE-MANAGER-BY-NAME"
           "GET-SCENE-MANAGER"
           "RENDER-WINDOW-UPDATE"
           "INIT-ENGINE"
           "ADD-RENDER-SYSTEM"
           "ROOT-INITIALISE"
           "ADD-FRAME-LISTENER"
           "SET-AMBIENT-LIGHT-RGBA"
           "CAMERA-SET-FOVY"
           "VIEWPORT-GET-HEIGHT"
           "SETUP-RESOURCES"
           "CAMERA-LOOKAT"
           "SET-DEFAULT-NUM-MIPMAPS"
           "RENDER-WINDOW-MOVED-OR-RESIZED"
           "ADD-WINDOW-LISTENER"
           "CAMERA-SET-FRUSTUM-OFFSET"
           "CREATE-CHILD-SCENENODE"
           "CREATE-CAMERA"
           "LIGHT-SET-POSITION"
           "RENDER-LOOP"
           "SHOW-CONFIG-DIALOG"
           "RELEASE-ENGINE"
           "REMOVE-WINDOW-LISTENER"
           "GET-CAMERA"
           "CAMERA-SET-ASPECT-RATIO"
           "LOAD-OGRE-PLUGIN"
           "CAMERA-SET-FOCAL-LENGTH"
           "GET-RENDER-SYSTEM"
           "CREATE-ENTITY"
           "ADD-RESOURCE-LOCATION"
           "CAMERA-SET-NEAR-CLIP-DISTANCE"
           "CURRENT-WINDOW-UPDATE"
           "SCENE-MANAGER-LOG-NAME"
           "VIEWPORT-GET-WIDTH"
           "W"
           "COI-QUATERNION"
           "RENDER-SYSTEM-SET-CONFIG-OPTION"
           "SET-AMBIENT-LIGHT-RGB"
           "REMOVE-FRAME-LISTENER"
           "LOG-MESSAGE"
           "ADD-VIEWPORT"
           "RESTORE-CONFIG"
           "CREATE-LIGHT"
           "LIGHT-HANDLE"
           "LIGHT-HANDLE-"
           "CREATE-SCENE-MANAGER"
           "SCENE-MANAGER-HANDLE"
           "SAVE-CONFIG"
           "RENDER-ONE-FRAME-CUSTOM"
           "DEFAULT-ENGINE-OPTIONS"
           "ATTACH-ENTITY-TO-SCENENODE"
           "CREATE-RENDER-WINDOW-GL-CONTEXT"
           "PUMP-MESSAGES"
           "SCENE-MANAGER-HANDLE-"
           "RENDER-WINDOW-CLOSED"
           "CREATE-RENDER-WINDOW"
           "CAMERA-SET-AUTO-ASPECT-RATIO"
           "WINDOW-LISTENER-EVENT"
           "RENDER-ONE-FRAME"
           "CREATE-ROOT"
           "ROOT-HANDLE"
           "ROOT-HANDLE-"
           "AUTO-WINDOW"
           "HEIGHT"
           "WIDTH"
           "LOG-NAME"
           "WINDOW-TITLE"
           "PLUGIN-FOLDER-S"
           "RENDERER-S"
           "ENGINE-OPTIONS"
           "CREATE-RENDER-WINDOW-HWND"
           "GET-RENDER-SYSTEM-BY-NAME"
           "RENDER-SYSTEM-HANDLE"
           "ROOT-IS-INITIALISED"
           "ENTITY-HANDLE"
           "ENTITY-HANDLE-"
           "SCENE-NODE-HANDLE"
           "SCENE-NODE-HANDLE-"
           "CAMERA-SET-POSITION"
           "RENDER-WINDOW-GET-HWND"
           "FRAME-LISTENER-EVENT"
           "Z"
           "Y"
           "X"
           "COI-VECTOR-3"
           "RENDER-WINDOW-SET-VISIBLE"
           "RENDER-WINDOW-HANDLE"
           "RENDER-WINDOW-HANDLE-"
           "RENDER-SYSTEM-HANDLE-"
           "RENDER-WINDOW-RESIZE"
           "CAMERA-SET-FAR-CLIP-DISTANCE"
           "CAMERA-HANDLE"
           "CAMERA-HANDLE-"
           "VIEWPORT-SET-BACKGROUND-COLOUR"
           "VIEWPORT-HANDLE"
           "UNUSED"
           "VIEWPORT-HANDLE-"))

(cl:in-package :llcoi)

(cl:defun vtable-lookup (pobj indx coff)
  (cl:let ((vptr (cffi:mem-ref pobj :pointer coff)))
    (cffi:mem-aref vptr :pointer (cl:- indx 2))))

(cl:defmacro virtual-funcall (pobj indx coff cl:&body body)
  `(cffi:foreign-funcall-pointer (vtable-lookup ,pobj ,indx ,coff) ,cl:nil ,@body))

(cffi:defcstruct viewport-handle-
  (unused :int))

(cffi::defctype viewport-handle :pointer)

(cffi:defcfun ("viewport_set_background_colour" viewport-set-background-colour) :void
                                                                                      (viewport-handle viewport-handle)
                                                                                      (r :float)
                                                                                      (g :float)
                                                                                      (b :float))

(cffi:defcstruct camera-handle-
  (unused :int))

(cffi::defctype camera-handle :pointer)

(cffi:defcfun ("camera_set_far_clip_distance" camera-set-far-clip-distance) :void
                                                                                  (camera-handle camera-handle)
                                                                                  (d :float))

(cffi:defcfun ("render_window_resize" render-window-resize) :void (width :unsigned-int)
                                                                  (height :unsigned-int))

(cffi:defcstruct render-system-handle-
  (unused :int))

(cffi:defcstruct render-window-handle-
  (unused :int))

(cffi::defctype render-window-handle :pointer)

(cffi:defcfun ("render_window_set_visible" render-window-set-visible) :void
                                                                            (window-handle render-window-handle)
                                                                            (visible :int))

(cffi:defcstruct coi-vector-3
  (x :float)
  (y :float)
  (z :float))

(cffi::defctype frame-listener-event :pointer)

(cffi:defcfun ("render_window_get_hwnd" render-window-get-hwnd) :unsigned-int
                                                                              (window-handle render-window-handle))

(cffi:defcfun ("camera_set_position" camera-set-position) :void (camera-handle camera-handle)
                                                                (x :float) (y :float) (z :float))

(cffi:defcstruct scene-node-handle-
  (unused :int))

(cffi::defctype scene-node-handle :pointer)

(cffi:defcstruct entity-handle-
  (unused :int))

(cffi::defctype entity-handle :pointer)

(cffi:defcfun ("root_is_initialised" root-is-initialised) :int)

(cffi::defctype render-system-handle :pointer)

(cffi:defcfun ("get_render_system_by_name" get-render-system-by-name) render-system-handle
                                                                                           (render-system-name :pointer))

(cffi:defcfun ("create_render_window_hwnd" create-render-window-hwnd) render-window-handle
                                                                                           (name :pointer)
                                                                                           (width :int)
                                                                                           (height :int)
                                                                                           (full-screen :int)
                                                                                           (hwnd :unsigned-long))

(cffi:defcstruct engine-options
  (renderer-s :pointer)
  (plugin-folder-s :pointer)
  (window-title :pointer)
  (log-name :pointer)
  (width :int)
  (height :int)
  (auto-window :int))

(cffi:defcstruct root-handle-
  (unused :int))

(cffi::defctype root-handle :pointer)

(cffi:defcfun ("create_root" create-root) root-handle (plugin-file-name :pointer)
                                                      (config-file-name :pointer)
                                                      (log-file-name :pointer))

(cffi:defcfun ("render_one_frame" render-one-frame) :int)

(cffi::defctype window-listener-event :pointer)

(cffi:defcfun ("camera_set_auto_aspect_ratio" camera-set-auto-aspect-ratio) :void
                                                                                  (camera-handle camera-handle)
                                                                                  (on :int))

(cffi:defcfun ("create_render_window" create-render-window) render-window-handle (name :pointer)
                                                                                 (width :int)
                                                                                 (height :int)
                                                                                 (full-screen :int))

(cffi:defcfun ("render_window_closed" render-window-closed) :int)

(cffi:defcstruct scene-manager-handle-
  (unused :int))

(cffi:defcfun ("pump_messages" pump-messages) :void)

(cffi:defcfun ("create_render_window_gl_context" create-render-window-gl-context) render-window-handle
                                                                                                       (name :pointer)
                                                                                                       (width :int)
                                                                                                       (height :int)
                                                                                                       (full-screen :int))

(cffi:defcfun ("attach_entity_to_scenenode" attach-entity-to-scenenode) :void
                                                                              (entity-handle entity-handle)
                                                                              (scenenode-handle scene-node-handle))

(cffi:defcfun ("default_engine_options" default-engine-options) :void (options :pointer))

(cffi:defcfun ("render_one_frame_custom" render-one-frame-custom) :int
                                                                       (time-since-last-frame :float))

(cffi:defcfun ("save_config" save-config) :void)

(cffi::defctype scene-manager-handle :pointer)

(cffi:defcfun ("create_scene_manager" create-scene-manager) scene-manager-handle
                                                                                 (type-name :pointer)
                                                                                 (instance-name :pointer))

(cffi:defcstruct light-handle-
  (unused :int))

(cffi::defctype light-handle :pointer)

(cffi:defcfun ("create_light" create-light) light-handle (light-name :pointer))

(cffi:defcfun ("restore_config" restore-config) :int)

(cffi:defcfun ("add_viewport" add-viewport) viewport-handle (camera-handle camera-handle))

(cffi:defcfun ("log_message" log-message) :void (message :pointer))

(cffi:defcfun ("remove_frame_listener" remove-frame-listener) :void
                                                                    (frame-event frame-listener-event))

(cffi:defcfun ("set_ambient_light_rgb" set-ambient-light-rgb) :void (r :float) (g :float) (b :float))

(cffi:defcfun ("render_system_set_config_option" render-system-set-config-option) :void
                                                                                        (render-system-handle render-system-handle)
                                                                                        (option :pointer)
                                                                                        (value :pointer))

(cffi:defcstruct coi-quaternion
  (w :float)
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("viewport_get_width" viewport-get-width) :float (viewport-handle viewport-handle))

(cffi:defcfun ("scene_manager_log_name" scene-manager-log-name) :void)

(cffi:defcfun ("current_window_update" current-window-update) :void (swap-buffers :int))

(cffi:defcfun ("camera_set_near_clip_distance" camera-set-near-clip-distance) :void
                                                                                    (camera-handle camera-handle)
                                                                                    (d :float))

(cffi:defcfun ("add_resource_location" add-resource-location) :void (location :pointer)
                                                                    (type :pointer) (group :pointer))

(cffi:defcfun ("create_entity" create-entity) entity-handle (entity-name :pointer)
                                                            (mesh-file :pointer))

(cffi:defcfun ("get_render_system" get-render-system) render-system-handle)

(cffi:defcfun ("camera_set_focal_length" camera-set-focal-length) :void
                                                                        (camera-handle camera-handle)
                                                                        (fl :float))

(cffi:defcfun ("load_ogre_plugin" load-ogre-plugin) :void (plugin :pointer))

(cffi:defcfun ("camera_set_aspect_ratio" camera-set-aspect-ratio) :void
                                                                        (camera-handle camera-handle)
                                                                        (w :float) (h :float))

(cffi:defcfun ("get_camera" get-camera) camera-handle (camera-name :pointer))

(cffi:defcfun ("remove_window_listener" remove-window-listener) :void
                                                                      (window-handle render-window-handle))

(cffi:defcfun ("release_engine" release-engine) :void)

(cffi:defcfun ("show_config_dialog" show-config-dialog) :int)

(cffi:defcfun ("render_loop" render-loop) :void)

(cffi:defcfun ("light_set_position" light-set-position) :void (light-handle light-handle) (x :float)
                                                              (y :float) (z :float))

(cffi:defcfun ("create_camera" create-camera) camera-handle (camera-name :pointer))

(cffi:defcfun ("create_child_scenenode" create-child-scenenode) scene-node-handle
                                                                                  (node-name :pointer))

(cffi:defcfun ("camera_set_frustum_offset" camera-set-frustum-offset) :void
                                                                            (camera-handle camera-handle)
                                                                            (offset-x :int)
                                                                            (offset-y :int))

(cffi:defcfun ("add_window_listener" add-window-listener) :void (window-handle render-window-handle)
                                                                (window-event window-listener-event))

(cffi:defcfun ("render_window_moved_or_resized" render-window-moved-or-resized) :void)

(cffi:defcfun ("set_default_num_mipmaps" set-default-num-mipmaps) :void (number :int))

(cffi:defcfun ("camera_lookat" camera-lookat) :void (camera-handle camera-handle) (x :float)
                                                    (y :float) (z :float))

(cffi:defcfun ("setup_resources" setup-resources) :void (resources-cfg :pointer))

(cffi:defcfun ("viewport_get_height" viewport-get-height) :float (viewport-handle viewport-handle))

(cffi:defcfun ("camera_set_fovy" camera-set-fovy) :void (camera-handle camera-handle) (angle :float))

(cffi:defcfun ("set_ambient_light_rgba" set-ambient-light-rgba) :void (r :float) (g :float)
                                                                      (b :float) (a :float))

(cffi:defcfun ("add_frame_listener" add-frame-listener) :void (frame-event frame-listener-event)
                                                              (frame-event-type :int))

(cffi:defcfun ("root_initialise" root-initialise) render-window-handle (auto-create-window :int)
                                                                       (render-window-title :pointer))

(cffi:defcfun ("add_render_system" add-render-system) :void (render-system render-system-handle))

(cffi:defcfun ("init_engine" init-engine) :void (options engine-options))

(cffi:defcfun ("render_window_update" render-window-update) :void
                                                                  (window-handle render-window-handle)
                                                                  (swap-buffers :int))

(cffi:defcfun ("get_scene_manager" get-scene-manager) scene-manager-handle)

(cffi:defcfun ("get_scene_manager_by_name" get-scene-manager-by-name) scene-manager-handle
                                                                                           (scene-manager-instance-name :pointer))

(cffi:defcfun ("set_render_system" set-render-system) :void (render-system render-system-handle))

(cffi:defcfun ("initialise_all_resourcegroups" initialise-all-resourcegroups) :void)

(cffi:defcfun ("=" render-system-handle-operator-=) render-system-handle- (this :pointer)
                                                                          (arg1 render-system-handle-))

(cffi:defcfun ("RenderSystemHandle__" render-system-handle-constructor) :void (this :pointer)
                                                                              (arg1 render-system-handle-))

(cl:defun render-system-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'render-system-handle-)))
    (render-system-handle-constructor instance)
    instance))

(cffi:defcfun ("RenderSystemHandle__" render-system-handle-constructor) :void (this :pointer))

(cl:defun render-system-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'render-system-handle-)))
    (render-system-handle-constructor instance)
    instance))

(cffi:defcfun ("=" coi-vector-3-operator-=) coi-vector-3 (this :pointer) (arg1 coi-vector-3))

(cffi:defcfun ("._1" .-1-constructor) :void (this :pointer) (arg1 coi-vector-3))

(cl:defun .-1-new ()
  (cl:let ((instance (cffi:foreign-alloc 'coi-vector-3)))
    (.-1-constructor instance)
    instance))

(cffi:defcfun ("._1" .-1-constructor) :void (this :pointer))

(cl:defun .-1-new ()
  (cl:let ((instance (cffi:foreign-alloc 'coi-vector-3)))
    (.-1-constructor instance)
    instance))

(cffi:defcfun ("=" engine-options-operator-=) engine-options (this :pointer) (arg1 engine-options))

(cffi:defcfun ("._2" .-2-constructor) :void (this :pointer) (arg1 engine-options))

(cl:defun .-2-new ()
  (cl:let ((instance (cffi:foreign-alloc 'engine-options)))
    (.-2-constructor instance)
    instance))

(cffi:defcfun ("._2" .-2-constructor) :void (this :pointer))

(cl:defun .-2-new ()
  (cl:let ((instance (cffi:foreign-alloc 'engine-options)))
    (.-2-constructor instance)
    instance))

(cffi:defcfun ("=" root-handle-operator-=) root-handle- (this :pointer) (arg1 root-handle-))

(cffi:defcfun ("RootHandle__" root-handle-constructor) :void (this :pointer) (arg1 root-handle-))

(cl:defun root-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'root-handle-)))
    (root-handle-constructor instance)
    instance))

(cffi:defcfun ("RootHandle__" root-handle-constructor) :void (this :pointer))

(cl:defun root-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'root-handle-)))
    (root-handle-constructor instance)
    instance))

(cffi:defcfun ("=" scene-manager-handle-operator-=) scene-manager-handle- (this :pointer)
                                                                          (arg1 scene-manager-handle-))

(cffi:defcfun ("SceneManagerHandle__" scene-manager-handle-constructor) :void (this :pointer)
                                                                              (arg1 scene-manager-handle-))

(cl:defun scene-manager-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'scene-manager-handle-)))
    (scene-manager-handle-constructor instance)
    instance))

(cffi:defcfun ("SceneManagerHandle__" scene-manager-handle-constructor) :void (this :pointer))

(cl:defun scene-manager-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'scene-manager-handle-)))
    (scene-manager-handle-constructor instance)
    instance))

(cffi:defcfun ("=" viewport-handle-operator-=) viewport-handle- (this :pointer)
                                                                (arg1 viewport-handle-))

(cffi:defcfun ("ViewportHandle__" viewport-handle-constructor) :void (this :pointer)
                                                                     (arg1 viewport-handle-))

(cl:defun viewport-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'viewport-handle-)))
    (viewport-handle-constructor instance)
    instance))

(cffi:defcfun ("ViewportHandle__" viewport-handle-constructor) :void (this :pointer))

(cl:defun viewport-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'viewport-handle-)))
    (viewport-handle-constructor instance)
    instance))

(cffi:defcfun ("=" coi-quaternion-operator-=) coi-quaternion (this :pointer) (arg1 coi-quaternion))

(cffi:defcfun ("._0" .-0-constructor) :void (this :pointer) (arg1 coi-quaternion))

(cl:defun .-0-new ()
  (cl:let ((instance (cffi:foreign-alloc 'coi-quaternion)))
    (.-0-constructor instance)
    instance))

(cffi:defcfun ("._0" .-0-constructor) :void (this :pointer))

(cl:defun .-0-new ()
  (cl:let ((instance (cffi:foreign-alloc 'coi-quaternion)))
    (.-0-constructor instance)
    instance))

(cffi:defcfun ("=" entity-handle-operator-=) entity-handle- (this :pointer) (arg1 entity-handle-))

(cffi:defcfun ("EntityHandle__" entity-handle-constructor) :void (this :pointer)
                                                                 (arg1 entity-handle-))

(cl:defun entity-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'entity-handle-)))
    (entity-handle-constructor instance)
    instance))

(cffi:defcfun ("EntityHandle__" entity-handle-constructor) :void (this :pointer))

(cl:defun entity-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'entity-handle-)))
    (entity-handle-constructor instance)
    instance))

(cffi:defcfun ("=" camera-handle-operator-=) camera-handle- (this :pointer) (arg1 camera-handle-))

(cffi:defcfun ("CameraHandle__" camera-handle-constructor) :void (this :pointer)
                                                                 (arg1 camera-handle-))

(cl:defun camera-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'camera-handle-)))
    (camera-handle-constructor instance)
    instance))

(cffi:defcfun ("CameraHandle__" camera-handle-constructor) :void (this :pointer))

(cl:defun camera-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'camera-handle-)))
    (camera-handle-constructor instance)
    instance))

(cffi:defcfun ("=" scene-node-handle-operator-=) scene-node-handle- (this :pointer)
                                                                    (arg1 scene-node-handle-))

(cffi:defcfun ("SceneNodeHandle__" scene-node-handle-constructor) :void (this :pointer)
                                                                        (arg1 scene-node-handle-))

(cl:defun scene-node-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'scene-node-handle-)))
    (scene-node-handle-constructor instance)
    instance))

(cffi:defcfun ("SceneNodeHandle__" scene-node-handle-constructor) :void (this :pointer))

(cl:defun scene-node-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'scene-node-handle-)))
    (scene-node-handle-constructor instance)
    instance))

(cffi:defcfun ("=" light-handle-operator-=) light-handle- (this :pointer) (arg1 light-handle-))

(cffi:defcfun ("LightHandle__" light-handle-constructor) :void (this :pointer) (arg1 light-handle-))

(cl:defun light-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'light-handle-)))
    (light-handle-constructor instance)
    instance))

(cffi:defcfun ("LightHandle__" light-handle-constructor) :void (this :pointer))

(cl:defun light-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'light-handle-)))
    (light-handle-constructor instance)
    instance))

(cffi:defcfun ("=" render-window-handle-operator-=) render-window-handle- (this :pointer)
                                                                          (arg1 render-window-handle-))

(cffi:defcfun ("RenderWindowHandle__" render-window-handle-constructor) :void (this :pointer)
                                                                              (arg1 render-window-handle-))

(cl:defun render-window-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'render-window-handle-)))
    (render-window-handle-constructor instance)
    instance))

(cffi:defcfun ("RenderWindowHandle__" render-window-handle-constructor) :void (this :pointer))

(cl:defun render-window-handle-new ()
  (cl:let ((instance (cffi:foreign-alloc 'render-window-handle-)))
    (render-window-handle-constructor instance)
    instance))
