;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.3
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant PATH_SEP "/")

(cl:defconstant EVENT_FRAME_STARTED 1)

(cl:defconstant EVENT_FRAME_RENDERING_QUEUED 2)

(cl:defconstant EVENT_FRAME_ENDED 4)

(cffi:defcstruct CameraHandle__
	(unused :int))

(cffi:defcstruct EntityHandle__
	(unused :int))

(cffi:defcstruct SceneNodeHandle__
	(unused :int))

(cffi:defcstruct LightHandle__
	(unused :int))

(cffi:defcstruct RenderWindowHandle__
	(unused :int))

(cffi:defcstruct RootHandle__
	(unused :int))

(cffi:defcstruct RenderSystemHandle__
	(unused :int))

(cffi:defcstruct SceneManagerHandle__
	(unused :int))

(cffi:defcstruct ViewportHandle__
	(unused :int))

(cffi:defcstruct coiQuaternion
	(w :float)
	(x :float)
	(y :float)
	(z :float))

(cffi:defcstruct coiVector3
	(x :float)
	(y :float)
	(z :float))

(cffi:defcstruct engine_options
	(renderer_s :string)
	(plugin_folder_s :string)
	(window_title :string)
	(log_name :string)
	(width :int)
	(height :int)
	(auto_window :int))

(cffi:defcfun ("release_engine" release_engine) :void)

(cffi:defcfun ("default_engine_options" default_engine_options) :void
  (options :pointer))

(cffi:defcfun ("init_engine" init_engine) :void
  (options engine_options))

(cffi:defcfun ("create_root" create_root) :pointer
  (pluginFileName :string)
  (configFileName :string)
  (logFileName :string))

(cffi:defcfun ("root_initialise" root_initialise) :pointer
  (auto_create_window :int)
  (render_window_title :string))

(cffi:defcfun ("create_render_window" create_render_window) :pointer
  (name :string)
  (width :int)
  (height :int)
  (full_screen :int))

(cffi:defcfun ("create_render_window_gl_context" create_render_window_gl_context) :pointer
  (name :string)
  (width :int)
  (height :int)
  (full_screen :int))

(cffi:defcfun ("create_render_window_hwnd" create_render_window_hwnd) :pointer
  (name :string)
  (width :int)
  (height :int)
  (full_screen :int)
  (hwnd :unsigned-long))

(cffi:defcfun ("render_window_get_hwnd" render_window_get_hwnd) :unsigned-int
  (window_handle :pointer))

(cffi:defcfun ("render_window_set_visible" render_window_set_visible) :void
  (window_handle :pointer)
  (visible :int))

(cffi:defcfun ("render_window_update" render_window_update) :void
  (window_handle :pointer)
  (swap_buffers :int))

(cffi:defcfun ("current_window_update" current_window_update) :void
  (swap_buffers :int))

(cffi:defcfun ("render_window_resize" render_window_resize) :void
  (width :unsigned-int)
  (height :unsigned-int))

(cffi:defcfun ("render_window_moved_or_resized" render_window_moved_or_resized) :void)

(cffi:defcfun ("render_window_closed" render_window_closed) :int)

(cffi:defcfun ("root_is_initialised" root_is_initialised) :int)

(cffi:defcfun ("save_config" save_config) :void)

(cffi:defcfun ("restore_config" restore_config) :int)

(cffi:defcfun ("show_config_dialog" show_config_dialog) :int)

(cffi:defcfun ("add_render_system" add_render_system) :void
  (render_system :pointer))

(cffi:defcfun ("set_render_system" set_render_system) :void
  (render_system :pointer))

(cffi:defcfun ("get_render_system" get_render_system) :pointer)

(cffi:defcfun ("get_render_system_by_name" get_render_system_by_name) :pointer
  (render_system_name :string))

(cffi:defcfun ("load_ogre_plugin" load_ogre_plugin) :void
  (plugin :string))

(cffi:defcfun ("create_scene_manager" create_scene_manager) :pointer
  (type_name :string)
  (instance_name :string))

(cffi:defcfun ("get_scene_manager" get_scene_manager) :pointer)

(cffi:defcfun ("get_scene_manager_by_name" get_scene_manager_by_name) :pointer
  (scene_manager_instance_name :string))

(cffi:defcfun ("render_one_frame" render_one_frame) :int)

(cffi:defcfun ("render_one_frame_custom" render_one_frame_custom) :int
  (time_since_last_frame :float))

(cffi:defcfun ("render_loop" render_loop) :void)

(cffi:defcfun ("pump_messages" pump_messages) :void)

(cffi:defcfun ("render_system_set_config_option" render_system_set_config_option) :void
  (render_system_handle :pointer)
  (option :string)
  (value :string))

(cffi:defcfun ("log_message" log_message) :void
  (message :string))

(cffi:defcfun ("set_default_num_mipmaps" set_default_num_mipmaps) :void
  (number :int))

(cffi:defcfun ("set_ambient_light_rgba" set_ambient_light_rgba) :void
  (r :float)
  (g :float)
  (b :float)
  (a :float))

(cffi:defcfun ("set_ambient_light_rgb" set_ambient_light_rgb) :void
  (r :float)
  (g :float)
  (b :float))

(cffi:defcfun ("add_viewport" add_viewport) :pointer
  (camera_handle :pointer))

(cffi:defcfun ("scene_manager_log_name" scene_manager_log_name) :void)

(cffi:defcfun ("create_child_scenenode" create_child_scenenode) :pointer
  (node_name :string))

(cffi:defcfun ("attach_entity_to_scenenode" attach_entity_to_scenenode) :void
  (entity_handle :pointer)
  (scenenode_handle :pointer))

(cffi:defcfun ("viewport_set_background_colour" viewport_set_background_colour) :void
  (viewport_handle :pointer)
  (r :float)
  (g :float)
  (b :float))

(cffi:defcfun ("viewport_get_width" viewport_get_width) :float
  (viewport_handle :pointer))

(cffi:defcfun ("viewport_get_height" viewport_get_height) :float
  (viewport_handle :pointer))

(cffi:defcfun ("setup_resources" setup_resources) :void
  (resources_cfg :string))

(cffi:defcfun ("add_resource_location" add_resource_location) :void
  (location :string)
  (type :string)
  (group :string))

(cffi:defcfun ("initialise_all_resourcegroups" initialise_all_resourcegroups) :void)

(cffi:defcfun ("create_camera" create_camera) :pointer
  (camera_name :string))

(cffi:defcfun ("get_camera" get_camera) :pointer
  (camera_name :string))

(cffi:defcfun ("camera_set_near_clip_distance" camera_set_near_clip_distance) :void
  (camera_handle :pointer)
  (d :float))

(cffi:defcfun ("camera_set_far_clip_distance" camera_set_far_clip_distance) :void
  (camera_handle :pointer)
  (d :float))

(cffi:defcfun ("camera_set_aspect_ratio" camera_set_aspect_ratio) :void
  (camera_handle :pointer)
  (w :float)
  (h :float))

(cffi:defcfun ("camera_set_auto_aspect_ratio" camera_set_auto_aspect_ratio) :void
  (camera_handle :pointer)
  (on :int))

(cffi:defcfun ("camera_set_fovy" camera_set_fovy) :void
  (camera_handle :pointer)
  (angle :float))

(cffi:defcfun ("camera_set_frustum_offset" camera_set_frustum_offset) :void
  (camera_handle :pointer)
  (offset_x :int)
  (offset_y :int))

(cffi:defcfun ("camera_set_focal_length" camera_set_focal_length) :void
  (camera_handle :pointer)
  (fl :float))

(cffi:defcfun ("camera_set_position" camera_set_position) :void
  (camera_handle :pointer)
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("camera_lookat" camera_lookat) :void
  (camera_handle :pointer)
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("create_entity" create_entity) :pointer
  (entity_name :string)
  (mesh_file :string))

(cffi:defcfun ("create_light" create_light) :pointer
  (light_name :string))

(cffi:defcfun ("light_set_position" light_set_position) :void
  (light_handle :pointer)
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("add_frame_listener" add_frame_listener) :void
  (frame_event :pointer)
  (frame_event_type :int))

(cffi:defcfun ("remove_frame_listener" remove_frame_listener) :void
  (frame_event :pointer))

(cffi:defcfun ("add_window_listener" add_window_listener) :void
  (window_handle :pointer)
  (window_event :pointer))

(cffi:defcfun ("remove_window_listener" remove_window_listener) :void
  (window_handle :pointer))

(cffi:defcstruct InputSystemHandle__
	(unused :int))

(cffi:defcstruct MouseInputHandle__
	(unused :int))

(cffi:defcstruct KeyboardInputHandle__
	(unused :int))

(cffi:defcenum KeyCode
	(:KC_UNASSIGNED #.#x00)
	(:KC_ESCAPE #.#x01)
	(:KC_1 #.#x02)
	(:KC_2 #.#x03)
	(:KC_3 #.#x04)
	(:KC_4 #.#x05)
	(:KC_5 #.#x06)
	(:KC_6 #.#x07)
	(:KC_7 #.#x08)
	(:KC_8 #.#x09)
	(:KC_9 #.#x0A)
	(:KC_0 #.#x0B)
	(:KC_MINUS #.#x0C)
	(:KC_EQUALS #.#x0D)
	(:KC_BACK #.#x0E)
	(:KC_TAB #.#x0F)
	(:KC_Q #.#x10)
	(:KC_W #.#x11)
	(:KC_E #.#x12)
	(:KC_R #.#x13)
	(:KC_T #.#x14)
	(:KC_Y #.#x15)
	(:KC_U #.#x16)
	(:KC_I #.#x17)
	(:KC_O #.#x18)
	(:KC_P #.#x19)
	(:KC_LBRACKET #.#x1A)
	(:KC_RBRACKET #.#x1B)
	(:KC_RETURN #.#x1C)
	(:KC_LCONTROL #.#x1D)
	(:KC_A #.#x1E)
	(:KC_S #.#x1F)
	(:KC_D #.#x20)
	(:KC_F #.#x21)
	(:KC_G #.#x22)
	(:KC_H #.#x23)
	(:KC_J #.#x24)
	(:KC_K #.#x25)
	(:KC_L #.#x26)
	(:KC_SEMICOLON #.#x27)
	(:KC_APOSTROPHE #.#x28)
	(:KC_GRAVE #.#x29)
	(:KC_LSHIFT #.#x2A)
	(:KC_BACKSLASH #.#x2B)
	(:KC_Z #.#x2C)
	(:KC_X #.#x2D)
	(:KC_C #.#x2E)
	(:KC_V #.#x2F)
	(:KC_B #.#x30)
	(:KC_N #.#x31)
	(:KC_M #.#x32)
	(:KC_COMMA #.#x33)
	(:KC_PERIOD #.#x34)
	(:KC_SLASH #.#x35)
	(:KC_RSHIFT #.#x36)
	(:KC_MULTIPLY #.#x37)
	(:KC_LMENU #.#x38)
	(:KC_SPACE #.#x39)
	(:KC_CAPITAL #.#x3A)
	(:KC_F1 #.#x3B)
	(:KC_F2 #.#x3C)
	(:KC_F3 #.#x3D)
	(:KC_F4 #.#x3E)
	(:KC_F5 #.#x3F)
	(:KC_F6 #.#x40)
	(:KC_F7 #.#x41)
	(:KC_F8 #.#x42)
	(:KC_F9 #.#x43)
	(:KC_F10 #.#x44)
	(:KC_NUMLOCK #.#x45)
	(:KC_SCROLL #.#x46)
	(:KC_NUMPAD7 #.#x47)
	(:KC_NUMPAD8 #.#x48)
	(:KC_NUMPAD9 #.#x49)
	(:KC_SUBTRACT #.#x4A)
	(:KC_NUMPAD4 #.#x4B)
	(:KC_NUMPAD5 #.#x4C)
	(:KC_NUMPAD6 #.#x4D)
	(:KC_ADD #.#x4E)
	(:KC_NUMPAD1 #.#x4F)
	(:KC_NUMPAD2 #.#x50)
	(:KC_NUMPAD3 #.#x51)
	(:KC_NUMPAD0 #.#x52)
	(:KC_DECIMAL #.#x53)
	(:KC_OEM_102 #.#x56)
	(:KC_F11 #.#x57)
	(:KC_F12 #.#x58)
	(:KC_F13 #.#x64)
	(:KC_F14 #.#x65)
	(:KC_F15 #.#x66)
	(:KC_KANA #.#x70)
	(:KC_ABNT_C1 #.#x73)
	(:KC_CONVERT #.#x79)
	(:KC_NOCONVERT #.#x7B)
	(:KC_YEN #.#x7D)
	(:KC_ABNT_C2 #.#x7E)
	(:KC_NUMPADEQUALS #.#x8D)
	(:KC_PREVTRACK #.#x90)
	(:KC_AT #.#x91)
	(:KC_COLON #.#x92)
	(:KC_UNDERLINE #.#x93)
	(:KC_KANJI #.#x94)
	(:KC_STOP #.#x95)
	(:KC_AX #.#x96)
	(:KC_UNLABELED #.#x97)
	(:KC_NEXTTRACK #.#x99)
	(:KC_NUMPADENTER #.#x9C)
	(:KC_RCONTROL #.#x9D)
	(:KC_MUTE #.#xA0)
	(:KC_CALCULATOR #.#xA1)
	(:KC_PLAYPAUSE #.#xA2)
	(:KC_MEDIASTOP #.#xA4)
	(:KC_VOLUMEDOWN #.#xAE)
	(:KC_VOLUMEUP #.#xB0)
	(:KC_WEBHOME #.#xB2)
	(:KC_NUMPADCOMMA #.#xB3)
	(:KC_DIVIDE #.#xB5)
	(:KC_SYSRQ #.#xB7)
	(:KC_RMENU #.#xB8)
	(:KC_PAUSE #.#xC5)
	(:KC_HOME #.#xC7)
	(:KC_UP #.#xC8)
	(:KC_PGUP #.#xC9)
	(:KC_LEFT #.#xCB)
	(:KC_RIGHT #.#xCD)
	(:KC_END #.#xCF)
	(:KC_DOWN #.#xD0)
	(:KC_PGDOWN #.#xD1)
	(:KC_INSERT #.#xD2)
	(:KC_DELETE #.#xD3)
	(:KC_LWIN #.#xDB)
	(:KC_RWIN #.#xDC)
	(:KC_APPS #.#xDD)
	(:KC_POWER #.#xDE)
	(:KC_SLEEP #.#xDF)
	(:KC_WAKE #.#xE3)
	(:KC_WEBSEARCH #.#xE5)
	(:KC_WEBFAVORITES #.#xE6)
	(:KC_WEBREFRESH #.#xE7)
	(:KC_WEBSTOP #.#xE8)
	(:KC_WEBFORWARD #.#xE9)
	(:KC_WEBBACK #.#xEA)
	(:KC_MYCOMPUTER #.#xEB)
	(:KC_MAIL #.#xEC)
	(:KC_MEDIASELECT #.#xED))

(cffi:defcenum MouseButtonID
	(:MB_Left #.0)
	:MB_Right
	:MB_Middle
	:MB_Button3
	:MB_Button4
	:MB_Button5
	:MB_Button6
	:MB_Button7)

(cffi:defcstruct KeyEvent
	(key KeyCode)
	(text :unsigned-int))

(cffi:defcenum Key_Modifier
	(:Shift #.#x0000001)
	(:Ctrl #.#x0000010)
	(:Alt #.#x0000100))

(cffi:defcstruct Axis
	(abs :int)
	(rel :int)
	(absOnly :int))

(cffi:defcstruct MouseState
	(width :int)
	(height :int)
	(X Axis)
	(Y Axis)
	(Z Axis)
	(buttons :int))

(cffi:defcfun ("create_input_system" create_input_system) :void
  (window_handle :unsigned-int))

(cffi:defcfun ("destroy_input_system" destroy_input_system) :void)

(cffi:defcfun ("create_mouse_object" create_mouse_object) :pointer
  (buffered :int))

(cffi:defcfun ("create_keyboard_object" create_keyboard_object) :pointer
  (buffered :int))

(cffi:defcfun ("destroy_mouse_object" destroy_mouse_object) :void
  (mouse_handle :pointer))

(cffi:defcfun ("destroy_keyboard_object" destroy_keyboard_object) :void
  (keyboard_handle :pointer))

(cffi:defcfun ("keyboard_is_key_down" keyboard_is_key_down) :int
  (keyboard_handle :pointer)
  (key_code KeyCode))

(cffi:defcfun ("keyboard_is_modifier_down" keyboard_is_modifier_down) :int
  (keyboard_handle :pointer)
  (key_modifier Key_Modifier))

(cffi:defcfun ("mouse_get_state" mouse_get_state) MouseState
  (mouse_handle :pointer))

(cffi:defcfun ("mouse_set_buffered" mouse_set_buffered) :void
  (mouse_handle :pointer)
  (buffered :int))

(cffi:defcfun ("keyboard_set_buffered" keyboard_set_buffered) :void
  (keyboard_handle :pointer)
  (buffered :int))

(cffi:defcfun ("keyboard_capture" keyboard_capture) :void
  (keyboard_handle :pointer))

(cffi:defcfun ("mouse_capture" mouse_capture) :void
  (mouse_handle :pointer))


